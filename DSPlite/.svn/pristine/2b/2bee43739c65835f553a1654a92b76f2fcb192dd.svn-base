<!doctype html>
<html>
<head>
  <title>service contents</title>
  <meta charset="utf-8">
  <meta http-equiv="keywords" content="dsp,contents,service">
  <meta http-equiv="description" content="dsp main page">
  <meta name="renderer" content="webkit">
  <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">

  <link rel="stylesheet" type="text/css" href="resources/css/jquery.dataTables.min.css" />
  <link rel="stylesheet" type="text/css" href="resources/css/dataTables.bootstrap.min.css" />
  <link rel="stylesheet" type="text/css" href="resources/css/bootstrap.css">
  <link rel="stylesheet" type="text/css" href="resources/css/dsp.css" />
  <link rel="stylesheet" type="text/css" href="resources/css/serviceTab.css" />

  <script type="text/javascript" src="js/jquery-1.12.3.js"></script>
  <script type="text/javascript" src="js/jquery.dataTables.min.js"></script>
  <script type="text/javascript" src="js/bootstrap.js"></script>
  <script type="text/javascript" src="js/dataTables.bootstrap.min.js"></script>
  <script type="text/javascript" src="js/include.js"></script>
  <script type="text/javascript" src="js/jquery.md5.js"></script>
  <script type="text/javascript" src="js/dsp.js"></script>
</head>
<body>
<include src="include/header.html"></include>
<!--实现接口文档页面的布局 -->
<div id="contents" class="container-fluid">
  <!-- print interface information -->
  <div id="hero-slider" class="row">
    <div class="col-md-3"><!--没有数据时的页面左栏 -->
      <ul class="nav nav-pills nav-stacked">
        <li role="presentation" class = "alist" ><a href="#" onclick="Service.myToggleClass()">我的服务</a>
          <div id="tabLeft">
            <div style="display:none;" class="template4collapse">
              <ul>
                <h4>
                  <a data-toggle="collapse" data-parent="#accordion" class="collapsed"
                     href="#collapse@num@"><span class="portal_arrow"></span>@nameSpace@</a>
                </h4>
                <div id="collapse@num@" class="panel-collapse collapse "></div>
              </ul>
            </div>
          </div>
        </li>
        <li role="presentation" class = "alist"><a href="#sigAlgPanel">签名算法</a></li>
        <li role="presentation" class = "alist"><a href="#sandboxPanel">沙盒功能</a></li>
      </ul>
    </div>
    <div class="mask" class="col-md-8">
      <div class="slider-body">
        <!--依次打印所有接口信息、签名算法和沙盒功能 -->
        <!--打印所有接口信息 模板 -->
        <div id="interfaceInformation">
          <div style="display:none;" class="template4table">
            <div class="panel" id="panel-num">
              <h3>@selectId@</h3>
              <table class="table table-striped">
                <thead>
                <tr>
                  <th>参数名称</th>
                  <th>参数值</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                  <td>REST接口地址</td>
                  <td>@restApiName@</td>
                </tr>
                <tr>
                  <td>SOAP接口地址</td>
                  <td><a href= @soapApiName@ target="_blank">@soapApiName@</a></td>
                </tr>
                <tr>
                  <td>返回实例</td>
                  <td> {"data":[{"***":***,"***":***...}],"resultcode":"1","message":"***"}</td>
                </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div style="display:none;" class="template4UserNavList">
          <li><a href="index.html#panel-UserData@num@" id="interfaceUserData@num@" >@interfaceName@</a></li>
        </div>

        <div id="panel4UserTemp"></div>

        <!--  实现签名算法功能模块的布局 -->
        <div id=sigAlgPanel>
          <!--签名算法介绍： -->
          <h1 class="main_hd" align = "center" style="font-family: 微软雅黑, 'Microsoft YaHei';">DSP签名算法</h1>
          <div id="signature">
            <ol>
              &nbsp &nbsp &nbsp &nbsp sign(签名)生成规则如下：参与签名的字段应包括appKey(应用标识), appSecret(应用密钥), timestamp（时间戳）以及
                                       具体接口查询数据库所需参数 。对除了appSecret的待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，
                                      使用键值对的格式（即key1value1key2value2…）拼接成字符串string1。在String1的头尾添加appSecret，得到String2.
                                       对string2作MD5加密，最终得到sign。即signature=MD5(string2)。 示例：<br>
            </ol>
            <ol>
              &nbsp &nbsp &nbsp &nbsp  假定用户需要查询com.cetiti.dsp.Mapper下的testSelectLevelsWithParams接口。
                                       所有生成sign所需参数如下：<br><br>
              &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp appKey=6f420cf8ee7541ed217580f918366072 <br>
              &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp levelid=3<br>
              &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp levelname=level5<br>
              &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp timestamp=1479805063501<br>
              &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp appSecret=c4bf7c4d1fbc3837d9f7649179f04a60<br>
            </ol>
            <ol>
                                        步骤1. 对所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，
                                       使用键值对的格式（即key1value1key2value2…）拼接成字符串string1：<br>
              string1 = appKey6f420cf8ee7541ed217580f918366072levelid3levelnamelevel5timestamp1479805063501
            </ol>
            <ol>
                                       步骤2.在上述排序后的键值对头尾加入appSecret的值，得到<br>
              string2 = c4bf7c4d1fbc3837d9f7649179f04a60appKey6f420cf8ee7541ed217580f91
              8366072levelid3levelnamelevel5timestamp1479805063501c4bf7c4d1fbc3837d9f7649179f04a60
            </ol>
            <ol>
                                       步骤3.该值通过MD5加密算法后，得到<br>
              sign=d93620bb45e4bc5f2527e9d70e036ad7.
            </ol>
            <ol>
                                          步骤4.若采用get方式访问接口，即在地址栏中输入以下内容：<br>
              <div style="word-wrap: break-word;word-break: normal;"}>
                http://localhost:8080/DSPlite/api/com.cetiti.dsp.Mapper/selectLevelsWithParams?appKey=6f420cf8ee7541ed217580f918366072&amp;appSecret=c4bf7c4d1fbc3837d9f7649179f04a60&amp;levelid=3&amp;levelname=level5&amp;sign=d93620bb45e4bc5f2527e9d70e036ad7&amp;timestamp=148221220739
              </div>
            </ol>
            <ol>
                                          每次查询接口，后台会根据该算法进行sign的验证，若是有参数出现问题，就不能访问接口。
            </ol>
          </div>
        </div>
        <!--  实现接口测试的沙盒功能模块布局 -->
        <div id=sandboxPanel>
          <h1 class="main_hd" align="center" style="font-family: 微软雅黑, 'Microsoft YaHei';">沙盒功能</h1>
          <div id="description" class="des">沙盒功能供用户测试接口是否能正常访问，以及接口参数是否正确</div>
          <ol id="manual" class="manual">
            <li><b>使用说明：</b></li>
            <li>（1）选择命名空间</li>
            <li>（2）选择上述命名空间下的接口，每个接口对应的格外参数也会一并显示（红色星号表示该字段必填）</li>
            <li>（3）点击访问按钮，即可得到相应的调试信息。</li>
          </ol>
          <div id="content" class="content">
            <div id="typeSelectorDiv" class="frm_control_group">
              <label class="frm_label">一、命名空间：</label>
              <div class="frm_controls">
                <select id="typeSelector" class="frm_input_box" onchange="Sandbox.showInterfaces()"></select>
              </div>
            </div>
            <div id="formSelectorDiv" class="frm_control_group">
              <label class="frm_label">二、接口列表：</label>
              <div class="frm_controls">
                <select id="formSelector" class="frm_input_box" onchange="Sandbox.showArguments()"></select>
                <span id="methodType" class="frm_tips">方法：POST</span>
              </div>
            </div>
            <div id="formContent" class="frm_control_group">
              <label>三、所有参数列表：</label> <br> <br>
              <div id="formContainer">
                <form target="result-iframe" form-type="args">
                  <div class="inputDiv">
                    <span class="red">*</span>
                    <span class="name">appKey</span>
                    <input type="text" id=appKeyID data-type="string" required="true" sync="true">
                    <span class="tips">请填写appKey</span>
                    <br>
                  </div>
                  <div class="inputDiv">
                    <span class="red">*</span>
                    <span class="name">appSecret</span>
                    <input type="text" id=appSecretID data-type="string" required="true" sync="true">
                    <span class="tips">请填写appSecret</span>
                    <br>
                  </div>
                  <div class="inputDiv" id=Arg1>
                    <span class="red">*</span>
                    <span class="name">levelid</span>
                    <input type="text" data-type="string" required="true" sync="true">
                    <span class="tips">请填写levelid</span>
                    <br>
                  </div>
                  <div class="inputDiv" id=Arg2>
                    <span class="red">*</span>
                    <span class="name">levelName</span>
                    <input type="text" data-type="string" required="true" sync="true">
                    <span class="tips">请填写levelName</span>
                    <br>
                  </div>
                  <input type="button" id="submit" value="测试接口" onclick="Sandbox.generateSign()" >
                </form>
                <div id = returnTitle>以下为返回信息：</div>
                <div id=ReturnMessages>&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- .mask -->
    <div class="clear" class="col-md-1"></div>
    <!-- #hero-slider -->
  </div>

  <include src="include/footer.html"></include>

</div>

<script type="text/javascript">
  "use strict";

  $(function() {
    //初始化
    $("#Arg1").css("display", "none");
    $("#Arg2").css("display", "none");
    $("#navItem li[name='docs']").addClass('active');
    //后台已处理用户和管理员数据
    Service.show();
  });
  //打印页面
  var Service = {
    innerData : {},
    myToggleClass :function (){
      $("#tabLeft").toggle();
    },
    removeElement:function (_element){
      var _parentElement = _element.parentNode;
      if(_parentElement){
        _parentElement.removeChild(_element);
      }
    },
    modifytable:function (sqlType,parameters,isAdmin){
      while($("#panel-num > table > tbody > tr").length>3){
        Service.removeElement($("#panel-num > table > tbody > tr")[2]);
      }
      if(sqlType!=""){
        if ( "DynamicSqlSource"==sqlType){
          $("#panel-num > table > tbody > tr:nth-child(2)")
              .after("<tr><td>类型</td><td>SQL语句</td></tr>");
        }
      }
      if(parameters.length!=0){
        $("#panel-num > table > tbody > tr:nth-child(2)")
            .after("<tr><td>参数</td><td class=\"@ApiName@\">@outputParamters@</td></tr>");
      }

      if(!isAdmin){
        $("#panel-num > table > tbody > tr:nth-child(2)")
            .after("<tr><td>流量</td><td>已用：@Used@ &nbsp &nbsp &nbsp &nbsp总共:@Total@</td></tr>");
      }
    },
    show : function() {
      var map = {};
      var mySet = {};
      var input = $("#serviceForm input[name='metaDataPath']");
      var v = input.val();
      $.post("service/myService",{ metaDataPath : v},function(data) {
        var indexOfNameSpace = 0;
        //object clone
        Service.innerData = $.extend(true, {}, data);
        //HTML  begin
        var dataLength;
        //防止用户没有权限访问接口
        if(data!={}){
          dataLength = data.data.length;
        }
        for (var i = 1; i < dataLength + 1; i++) {
          //Set
          if (!mySet.hasOwnProperty(data.data[i - 1].nameSpace)) {
            mySet[data.data[i - 1].nameSpace] = data.data[i - 1].nameSpace;
          }
        }
        //打印所有的collapse.
        for (var item in mySet) {
          indexOfNameSpace++;
          var text2 = $(".template4collapse")[0].innerHTML.replace(/@nameSpace@/g,item)
              .replace(/@num@/g,indexOfNameSpace);
          $(text2).appendTo("#tabLeft");
          //加入包的下拉菜单
          var test5 = "<option >" + item+ "</option>";
          $(test5).appendTo("#typeSelector");
          //Map
          map[item] = indexOfNameSpace;
        }
        $("#collapse1").toggleClass("in");
        $("#tabLeft > ul:nth-child(2) > h4 > a").toggleClass("collapsed");

        //将接口分类收入相应的命名空间
        var flag = true;
        for (var i = 1; i < dataLength+ 1; i++) {
          if (i == 1) {
            var txt1 = "<li><a href=\"index.html#panel-&num&\" id=\"interface&num&\" >&selectId&</a></li>";
            var text1 = txt1.replace(/&num&/g,i.toString()).replace(/&selectId&/g,data.data[0].selectId);
            $(text1).appendTo("#collapse" + 1);
            //打印下划菜单的第一个接口
            var txt7 = "<option value = \"&apiName&\" class=\"&namspace&\">&selectId&</option>";
            var text7 = txt7.replace(/&selectId&/g,data.data[0].selectId)
                .replace(/&apiName&/g,data.data[0].apiName)
                .replace(/&namspace&/g,data.data[0].nameSpace);
            $(text7).appendTo("#formSelector");
          } else {
            for ( var item in mySet) {
              if(flag){
                var lastItem = item;
                flag = false;
              }
              if (item == data.data[i - 1].nameSpace) {
                txt1 = "<li><a href=\"index.html#panel-&num&\" id=\"interface&num&\" >&selectId&</a></li>";
                var text1 = txt1.replace(/&num&/g,i.toString()).replace(/&selectId&/g,data.data[i - 1].selectId);
                $(text1).appendTo("#collapse"+ map[item]);
                //打印下划菜单的剩下接口
                if(lastItem == item){
                  var txt6 = "<option value = \"&apiName&\" class=\"&namspace&\">&selectId&</option>";
                  var text6 = txt6.replace(/&selectId&/g,data.data[i - 1].selectId)
                      .replace(/&apiName&/g,data.data[i - 1].apiName)
                      .replace(/&namspace&/g,item);
                  $(text6).appendTo("#formSelector");
                }
              }
            }
          }
          $("[class$=\'"+ $("#typeSelector").val()+ "\']").show();
          // right portion of the Vertical tab
          Service.modifytable(data.data[i - 1].sqlType,data.data[i - 1].parameters,data.data[i - 1].total==undefined);
          var tr = $(".template4table")[0].innerHTML.replace(/num/g, i.toString())
              .replace(/@ApiName@/g,data.data[i - 1].apiName)
              .replace(/@outputParamters@/g,data.data[i - 1].parameters)
              .replace(/@restApiName@/g,data.data[i - 1].restApiName)
              .replace(/@soapApiName@/g,data.data[i - 1].soapApiName)
              .replace(/@selectId@/g,data.data[i - 1].selectId)
              .replace(/@Used@/g,data.data[i - 1].used)
              .replace(/@Total@/g,data.data[i - 1].total);
          $(tr).appendTo("#interfaceInformation");
          // the end
        }
      }, "json");
    }
  }
  //沙盒功能
  var Sandbox = {
    generateSign : function() {
      var appSecret = $("#appSecretID").val();
      var argumentSet = {
        timestamp : new Date().getTime(),
        appKey : $("#appKeyID").val(),
        appSecret : $("#appSecretID").val()
      }
      if ($("#Arg1 > input[type=\"text\"]")[0].value) {
        argumentSet[$("#Arg1 > span.name")[0].innerHTML] = $("#Arg1 > input[type=\"text\"]")[0].value;
      }
      if ($("#Arg2 > input[type=\"text\"]")[0].value) {
        argumentSet[$("#Arg2 > span.name")[0].innerHTML] = $("#Arg2 > input[type=\"text\"]")[0].value;
      }
      var sortedKeys = Object.keys(argumentSet).sort();
      var midB4sign = new String("");
      for (var i = 0; i < sortedKeys.length; i++) {
        midB4sign += sortedKeys[i] + argumentSet[sortedKeys[i]];
      }
      var b4sign = appSecret + midB4sign + appSecret;
      var sign = $.md5(b4sign);
      argumentSet["sign"] = sign;
      var interfaceUrl = $("#formSelector").val();
      $.post("api/" + interfaceUrl, argumentSet, function(data) {
        var temptext = JSON.stringify(data);
        document.getElementById("ReturnMessages").innerHTML = temptext;
      }, "json");
    },
    showInterfaces:function () {
      var nameSpace = $("#typeSelector").val();
      for (var i = 0; i < $("input[type=\"text\"]").length; i++) {
        $("input[type=\"text\"]")[i].value="";
      }
      var spareData = Service.innerData;
      var selectedOption = new String("");
      $("#formSelector")[0].innerHTML="";
      for (var i = 0; i < spareData.data.length; i++) {
        if(spareData.data[i].nameSpace==$("#typeSelector").val()){
          selectedOption += "<option value="+spareData.data[i].apiName+" class="+nameSpace+">"
              +spareData.data[i].selectId+"</option>";
        }
      }
      $("#formSelector").append(selectedOption);
    },
    showArguments:function () {
      var selectNameSpace = $("#typeSelector").val();
      var interfaceName = $("#formSelector").val();
      var selectedApiName;
      for (var i = 0; i < $("input[type=\"text\"]").length; i++) {
        $("input[type=\"text\"]")[i].value="";
      }
      $("#Arg1").hide();
      $("#Arg2").hide();
      //打印对应接口所需的额外参数
      var modifiedData = Service.innerData;
      for (var i = 0; i < modifiedData.data.length ; i++) {
        if(modifiedData.data[i].nameSpace==selectNameSpace && modifiedData.data[i].apiName==interfaceName){
          var argumentArray = modifiedData.data[i].parameters;
          for (var w = 0; (w < argumentArray.length)&& (argumentArray != ""); w++) {
            if (w == 0) {
              $("#Arg1 > span.tips")[0].innerHTML = "请填写"+argumentArray[0];
              $("#Arg1 > span.name")[0].innerHTML = argumentArray[0];
              $("#Arg1").show();
            } else {
              $("#Arg2 > span.tips")[0].innerHTML = "请填写"+argumentArray[1];
              $("#Arg2 > span.name")[0].innerHTML = argumentArray[1];
              $("#Arg2").show();
            }
          }
        }
      }
    }
  }
</script>
</body>
</html>