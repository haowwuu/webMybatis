/*
 * File Name: SqlSessionFactoryRepos.java
 * Copyright: Copyright 2014-2014 CETC52 CETITI All Rights Reserved.
 * Description: 
 * Author: Wuwuhao
 * Create Date: 2016-8-26

 * Modifier: Wuwuhao
 * Modify Date: 2016-8-26
 * Bugzilla Id: 
 * Modify Content: 
 */
package com.cetiti.dsp.util;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.sql.DataSource;

import org.apache.ibatis.datasource.pooled.PooledDataSource;
import org.apache.ibatis.datasource.unpooled.UnpooledDataSource;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.mapping.SqlSource;
import org.apache.ibatis.scripting.defaults.RawSqlSource;
import org.apache.ibatis.scripting.xmltags.DynamicSqlSource;
import org.apache.ibatis.scripting.xmltags.MixedSqlNode;
import org.apache.ibatis.scripting.xmltags.SqlNode;
import org.apache.ibatis.scripting.xmltags.TextSqlNode;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.SqlSessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cetiti.dsp.model.APIinfo;
import com.cetiti.dsp.service.ResourcePathService;
import com.cetiti.dsp.service.impl.ResourcePathServiceImpl;


/**
 * 〈一句话功能简述〉
 * 
 * @author    Wuwuhao
 * @version   DSPlite V0.2.0, 2016-8-26
 * @see       
 * @since     DSPlite V0.2.0
 */

public class SqlSessionFactoryRepos {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(SqlSessionFactoryRepos.class);

	private static Map<String, SqlSessionFactory> sessionFactoryRepos = new ConcurrentHashMap<String, SqlSessionFactory>();
	private static Map<String, APIinfo> apiRepos = new ConcurrentHashMap<String, APIinfo>();
	private static Map<String, String> metadataFileRepos = new ConcurrentHashMap<String, String>();
	
	public static boolean hasSqlSessionFactory(SqlSessionFactory ssf){
		return null!=sessionFactoryRepos.get(getDataSourceKey(ssf));
	}
	
	public static SqlSessionFactory getSessionFactory(String key){
		return sessionFactoryRepos.get(key);
	}
	
	public static int size(){
		return sessionFactoryRepos.size();
	}
	
	public static void remove(String key){
		if(null==key){
			return;
		}
		for(Map.Entry<String, APIinfo> entry: apiRepos.entrySet()){
			if(key.equals(entry.getValue().getDataSource())){
				apiRepos.remove(entry.getKey());
			}
		}
		String path = metadataFileRepos.get(key);
		if(null!=path){
			metadataFileRepos.remove(key);
			try {
				ResourcePathService rpService = new ResourcePathServiceImpl();
				rpService.delete(path);
			} catch (Exception e) {
				LOGGER.error("remove[{}], [{}]",key, e.getMessage());
			}
			
		}
		sessionFactoryRepos.remove(key);
	}
	
	public static void clear(){
		apiRepos.clear();
		metadataFileRepos.clear();
		try {
			ResourcePathService rpService = new ResourcePathServiceImpl();
			rpService.clear();
		} catch (Exception e) {
			LOGGER.error("remove[{}]", e.getMessage());
		}
		sessionFactoryRepos.clear();
	}
	
	public static void removeServcice(String nameSpace, String id){
		if(null==nameSpace){
			return;
		}
		for(Map.Entry<String, APIinfo> entry: apiRepos.entrySet()){
			if(nameSpace.equals(entry.getValue().getNameSpace())){
				if(null==id){
					apiRepos.remove(entry.getKey());
				}else if(id.equals(entry.getValue().getSelectId())){
					apiRepos.remove(entry.getKey());
				}
			}
		}
	}
	
	private static String getDataSourceKey(SqlSessionFactory ssf){
		String key = null;
		if(null==ssf){
			return key;
		}	
		DataSource ds = ssf.getConfiguration().getEnvironment().getDataSource();
		return getDataSourceKey(ds);
	}
	
	public static String getDataSourceKey(DataSource ds){
		String key=null;
		if(ds instanceof UnpooledDataSource){
			UnpooledDataSource upds = (UnpooledDataSource) ds;
			key = formatDatasourceUrl(upds.getUrl())+formatDatasourceUser(upds.getUsername());	
		}else if(ds instanceof PooledDataSource){
			PooledDataSource pds = (PooledDataSource)ds;
			key = formatDatasourceUrl(pds.getUrl())+formatDatasourceUser(pds.getUsername());
		}else if(null != ds){
			key = String.valueOf(ds.hashCode());
		}
		
		return key;
	}
	
	private static String formatDatasourceUrl(String url){
		if(null==url){
			return null;
		}
		int pindex = url.indexOf("?");
		if(pindex<0){
			return url;
		}else {
			return url.substring(0, pindex);
		}
	}
	
	private static String formatDatasourceUser(String user){
		return "-"+user;
	}
	
	public static SqlSessionFactory addSqlSessionFactory(SqlSessionFactory ssf, String metadataFile){
		if(null == ssf){
			return null;
		}
		String key = getDataSourceKey(ssf);
		if(null==key){
			return null;
		}
		if(null!=metadataFile){
			metadataFileRepos.put(key, metadataFile);
		}
		addApiInfo(ssf, key);
		
		return sessionFactoryRepos.put(key, ssf);
	}
	
	private static void addApiInfo(SqlSessionFactory ssf, String datasource){
		Configuration config = ssf.getConfiguration();
		for(String name:config.getMappedStatementNames()){
			int idx = name.lastIndexOf(".");
			if(idx>0){
				APIinfo apiInfo = new APIinfo();
				String nameSpace = name.substring(0, idx);
				String selectId = name.substring(idx+1);
				apiInfo.setNameSpace(nameSpace);
				apiInfo.setSelectId(selectId);
				String apiName = generateApiName(selectId, nameSpace);
				apiInfo.setApiName(apiName);
				apiInfo.setFullQualifiedName(name);
				MappedStatement ms = config.getMappedStatement(name);
				ParamObj paramObj = getParametersFormMappedStatement(ms);
				if(null!=paramObj){
					if(null!=paramObj.params&&paramObj.params.size()>0){
						apiInfo.setSqlType(paramObj.type);
					}else{
						apiInfo.setSqlType("");
					}
					apiInfo.setParameters(paramObj.params);
					apiInfo.setSqlText(paramObj.sql);
				}
				apiInfo.setDataSource(datasource);
				apiInfo.setMetadataFile(metadataFileRepos.get(datasource));
				if(null==apiRepos.get(apiName)){
					apiRepos.put(apiName, apiInfo);
				}
			}
		}
	}
	
	public static String generateApiName(String selectId, String nameSpace){
		/*return selectId+Math.abs(nameSpace.hashCode());*/
		return nameSpace + "/" +selectId;
	}
	
	public static APIinfo getApiInfo(String apiName){
		return apiRepos.get(apiName);
	}
	
	public static Collection<APIinfo> getApiInfos(){
		return apiRepos.values();
	}
	
	private static class ParamObj{
		String type;
		String sql;
		List<String> params;
	}
	
	private static ParamObj getParametersFormMappedStatement(MappedStatement ms){
		ParamObj paramObj = new ParamObj();
		SqlSource ss = ms.getSqlSource();
		
		if(ss instanceof RawSqlSource)
		{
			BoundSql sql = ss.getBoundSql(null);
			List<String> params = new ArrayList<String>();
			for(ParameterMapping pm: sql.getParameterMappings()){
				params.add(pm.getProperty());
			}
			paramObj.params=params;
			paramObj.sql=sql.getSql();
		}
		else if(ss instanceof DynamicSqlSource)
		{
			Object obj = getPrivateField(ss, "rootSqlNode");
			if(null==obj)
				return null;
			if(obj instanceof MixedSqlNode){
				MixedSqlNode mixedSqlNode = (MixedSqlNode)obj;
				Object contents = getPrivateField(mixedSqlNode, "contents");
				if(null==contents)
					return null;
				if(contents instanceof List<?>){
					@SuppressWarnings("unchecked")
					List<SqlNode> nodes = (List<SqlNode>)contents;
					for(SqlNode node:nodes){
						if(node instanceof TextSqlNode){
							Object sqlText = getPrivateField(node, "text");
							paramObj.params = getParamFromSql(sqlText.toString());
						}
					}
				}
			}
			BoundSql sql = ss.getBoundSql(null);
			paramObj.sql = sql.getSql();
		}
		paramObj.type = ss.getClass().getSimpleName();
		
		return paramObj;
	}
	
	private static Object getPrivateField(Object obj, String field){
		Class<? extends Object> clazz = obj.getClass();
		try {
			Field f = clazz.getDeclaredField(field);
			f.setAccessible(true);
			return f.get(obj);
		} catch (Exception e) {
			//e.printStackTrace();
			LOGGER.error(e.getMessage());
		}
		return null;
	}
	
	private static List<String> getParamFromSql(String sqlText){
		List<String> paramsList = new ArrayList<String>();
		if(null == sqlText){
			return paramsList;
		}
		int sidx = sqlText.indexOf("${");
		if(sidx<0){
			sidx = sqlText.indexOf("#{");
		}
		if(sidx<0){
			return paramsList;
		}
		int eidx = sqlText.indexOf("}");
		if(eidx<0){
			return paramsList;
		}
		String param = sqlText.substring(sidx+2,eidx);
		paramsList.add(param);
		List<String> param2 = getParamFromSql(sqlText.substring(eidx+1));
		if(param2.size()>0){
			paramsList.addAll(param2);
		}
		
		return paramsList;
	}
	
}
